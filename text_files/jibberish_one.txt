kay, so now we know how to open a file. Now we have to learn how to read through the file, and it couldn't be easier, it really couldn't be easier. It's almost at the point where you probably would have guessed it if I didn't tell you. Well, so xfile. remember, is not the data, it's a way to get to the data. It's a sequence. Well, we already have a loop, the determinant loop, the for loop, and all you do is you put the handle here. Now this is not the same as putting a string there, the for loop is smart. This is some kind of a sequence of things. So a file handle to the for loop looks like a sequence of lines. It's a sequence of lines. So again, the for loop is going to run this code multiple times where the iteration variable, cheese in this case, is going to take on the successive lines. If this file has 10 lines, this loop is going to run 10 times. Cheese is going to be the first line, the second line, third line. So that's it, that's it. Isn't it pretty? No while loop, no end of file, no nothing. Run this as many times as necessary, one time through for each of the lines in the file. You take care all the stuff. And if you've done this in other programming languages, you'll be like, Python, you are my friend. Because it's simple. And you can look at it and go like, I know what it's doing. Whereas all the other programming languages have like total gibberish ways of doing this. And yes, you can figure it out and after you've used C or some other JavaScript language or whatever to read a file, Python is better. Because Python is elegant and straightforward, and it has to do with this for and in clause which I'm so in love with. So that just says treat a file handle as a sequence of lines, and allow us to iterate through it automatically using the for loop.
1:58
So we can write some smart things, right? So a counting loop, let's just do counting. So now we actually have something to count where we don't exactly know how many things there are, right? If you go back a couple chapters, we were counting things, we knew how many things there are. But now we don't. So, we set the counter to 0, and then we loop through each line, or don't do anything with the line, count = count + 1, and we're done. We know that this file has 132045 lines, right? And away we go. So, we have built a line counter, a file length counter, just by looping through that. Simple stuff. Now sometimes, not so much when we're doing files but often when reading data from elsewhere, we want to read it all. And so this time, we will read the whole thing in with .read. Now the thing about this is, it doesn't split it into lines. It actually just reads all the stuff with a newline, all the stuff with a newline, so you've got to be careful. But of course if you print it out, it will give you all the newlines because the print will show the newlines. But you have to realize you've got the whole as one big blob of characters punctuated by newlines. Whereas the for loop knows to go to the newline and then give you the first line, go to the newline and give you the second line, etc., etc. But we can read the entire file, so in this case we're reading mbox-short.txt, read the whole thing into a string. So that takes all of that file, whatever is on that file and takes the characters and sticks them in. Then we can say how many things did we get? Well, we got 94626 characters in this case. And we can just print like with slicing, start at the beginning, up to but not including the 20th character. So that's really the first 20 characters that we would see from that file into a single string. And sometimes we'll use that, sometimes we'll write a f